---
- fail: msg="docker_ca_cert is undefined"
  when: (docker_client_tls or docker_server_tls) and docker_ca_cert == ''
- fail: msg="docker_tls_cert is undefined"
  when: (docker_client_tls or docker_server_tls) and docker_tls_cert == ''
- fail: msg="docker_tls_key is undefined"
  when: (docker_client_tls or docker_server_tls) and docker_tls_key == ''

- name: tweak grub settings
  lineinfile:
    dest: /etc/default/grub
    regexp: GRUB_CMDLINE_LINUX=.*
    line: GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1"
  register: grubbed

- name: apply changed grub settings
  command: update-grub
  when: grubbed | changed

- name: reboot
  command: shutdown -r now "Ansible updated grub"
  async: 0
  poll: 0
  ignore_errors: true
  when: grubbed | changed

- name: wait for server to relaunch
  local_action: wait_for host={{ ansible_ssh_host }} state=started
  when: grubbed | changed

- name: see if HTTPS transport is already present
  stat: path=/usr/lib/apt/methods/https get_md5=false
  register: https_transport_file

- name: ensure HTTPS transport is available to apt
  apt: update_cache=yes cache_valid_time=600 name=apt-transport-https
  when: not https_transport_file.stat.exists

- name: ensure the docker apt key is trusted
  apt_key:
    keyserver: hkp://keyserver.ubuntu.com:80
    id: 58118E89F3A912897C070ADBF76221572C52609D
    state: present

- name: ensure the docker apt repository is present
  apt_repository:
    repo: deb https://apt.dockerproject.org/repo ubuntu-{{ ubuntu_flavor }} main
    state: present

- name: install docker
  apt: update_cache=yes name=docker-engine

- name: create systemd docker config directory
  file: path=/etc/systemd/system/docker.service.d state=directory

- name: install docker configuration
  template: src=docker_config dest=/etc/systemd/system/docker.service.d/docker.conf mode=0644

- name: create docker TLS directory
  file: path={{ docker_tls_path }} state=directory
  when: docker_client_tls or docker_server_tls

- name: install docker TLS credentials
  template: src={{ item.from }} dest={{ item.to }} mode=0644
  with_items:
    - from: ca.pem.j2
      to: "{{ docker_tls_path }}/ca.pem"
    - from: key.pem.j2
      to: "{{ docker_tls_path }}/key.pem"
    - from: cert.pem.j2
      to: "{{ docker_tls_path }}/cert.pem"
  when: docker_client_tls or docker_server_tls

- name: reload systemctl
  shell: systemctl daemon-reload

- name: restart docker
  shell: systemctl restart docker

- name: docker-py
  pip: name=docker-py state=present version=1.9.0

- name: stop running docker containers
  shell: docker stop $(docker ps -a -q) || true

- name: remove docker containers
  shell: docker rm -v $(docker ps -a -q) || true

- name: run docker cleanup cronjob
  cron: name="docker cleanup" minute=15 user="root" job="/usr/bin/docker rmi $(/usr/bin/docker images -q --filter 'dangling=true')"

- name: install docker-compose
  shell: curl -L https://github.com/docker/compose/releases/download/1.3.3/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose

- name: allow incoming ufw connections
  lineinfile:
    dest: /etc/default/ufw
    regexp: DEFAULT_FORWARD_POLICY=.*
    line: DEFAULT_FORWARD_POLICY="ACCEPT"
  register: ufw_changed

- name: reload ufw
  shell: ufw reload
  when: ufw_changed | changed
